// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  username  String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  email     String?   @db.VarChar(450)
  firstName String?   @map("first_name") @db.VarChar(255)
  lastName  String?   @map("last_name") @db.VarChar(255)
  birthDate DateTime? @map("birth_date") @db.Date
  salary    Decimal?  @db.Decimal(12, 3)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userRoles     UserRole[]
  refreshTokens RefreshToken[]

  todos Todo[]

  roomMembers  RoomMember[]
  roomMessages RoomMessage[]

  @@map("users")
}

model Role {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @db.VarChar(255)
  sort Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  roleId String @map("role_id") @db.Uuid
  role   Role   @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RefreshToken {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  user           User      @relation(fields: [userId], references: [id])
  token          String    @default(cuid()) @db.VarChar(255)
  expires        DateTime
  createdByIp    String    @map("created_by_ip") @db.VarChar(255)
  revoked        DateTime?
  revokedByIp    String?   @map("revoked_by_ip") @db.VarChar(255)
  replaceByToken String?   @map("replace_by_token") @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("refresh_tokens")
}

model Todo {
  id Int @id @default(autoincrement())

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  title       String  @db.VarChar(64)
  description String? @db.VarChar(450)
  isCompleted Boolean @default(false) @map("is_completed")
  sort        Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("todos")
}

model Room {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(255)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  roomMembers  RoomMember[]
  roomMessages RoomMessage[]

  @@map("rooms")
}

enum RoomMemberRole {
  Admin     @map("admin")
  Moderator @map("moderator")
  Member    @map("member")
}

model RoomMember {
  id String @id @default(uuid()) @db.Uuid

  roomId    String         @map("room_id") @db.Uuid
  room      Room           @relation(fields: [roomId], references: [id])
  memberId  String         @map("member_id") @db.Uuid
  member    User           @relation(fields: [memberId], references: [id])
  role      RoomMemberRole @default(Member)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime?      @map("deleted_at")

  @@unique([roomId, memberId])
  @@map("room_members")
}

enum MessageType {
  Text   @map("text")
  Icon   @map("icon")
  Icons  @map("icons")
  Link   @map("link")
  Image  @map("image")
  Images @map("images")
}

model RoomMessage {
  id      String      @id @default(uuid()) @db.Uuid
  type    MessageType @default(Text)
  content Json

  roomId String @map("room_id") @db.Uuid
  room   Room   @relation(fields: [roomId], references: [id])
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("room_messages")
}
